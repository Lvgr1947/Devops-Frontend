name: CI/CD Frontend

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  IMAGE_NAME: lvgr1947/front-end
  AWS_REGION: ap-south-1

jobs:
  validate-yaml:
    name: Lint & Validate K8s YAML
    runs-on: self-hosted

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Check if YAML files changed
        id: yaml_check
        run: |
          CHANGED=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -E '\.ya?ml$' || true)
          echo "changed_files=$CHANGED" >> $GITHUB_OUTPUT

      - name: Run YAML validator
        if: steps.yaml_check.outputs.changed_files != ''  
        run: |
          curl -L https://github.com/yannh/kubeconform/releases/latest/download/kubeconform-linux-amd64.tar.gz | tar xz
          sudo mv kubeconform /usr/local/bin/
          kubeconform -strict -summary -output json -ignore-missing-schemas -verbose k8s/

  build-and-push:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: validate-yaml

    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Install Docker on EC2 instance
      - name: Install Docker if not present
        if: steps.app_check.outputs.changed_files != ''
        run: |
          if ! command -v docker &> /dev/null; then
            echo "Docker not found. Installing..."
            sudo apt update
            sudo apt install -y docker.io
            sudo systemctl start docker
          else
            echo "Docker already installed."
          fi
          
      - name: Docker Login
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build Docker Image
        run: docker build -t $IMAGE_NAME:latest ./app/frontend

      - name: Push Docker Image
        run: docker push $IMAGE_NAME:latest

  deploy-staging:
    name: Deploy to Staging
    runs-on: self-hosted
    needs: ["validate-yaml","build-and-push"]
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy via SSH into EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            kubectl apply -f k8s/staging/

  deploy-production:
    name: Deploy to Production
    runs-on: self-hosted
    needs: ["validate-yaml","build-and-push"]
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://venudev.duckdns.org/production

    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

          
      - name: Check if production/ folder changed
        id: check_prod_changes
        run: |
          git fetch origin main
          CHANGED=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep '^production/' || true)
          if [ -z "$CHANGED" ]; then
            echo "No production changes found. Skipping deployment."
            echo "run_prod=false" >> $GITHUB_OUTPUT
          else
            echo "Production changes detected."
            echo "run_prod=true" >> $GITHUB_OUTPUT
          fi

      - name: Set kubeconfig for production
        run: echo "${{ secrets.KUBECONFIG_PROD }}" > kubeconfig && chmod 600 kubeconfig
      - name: Deploy to production namespace
        if: steps.check_prod_changes.outputs.run_prod == 'true'
        run: kubectl --kubeconfig=kubeconfig apply -f k8s/production/

        

